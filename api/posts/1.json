{"total":3,"pageSize":10,"pageCount":1,"data":[{"title":"just do it","slug":"just do it","date":"2030-12-26T16:00:00.000Z","updated":"2021-04-24T09:31:42.568Z","comments":true,"path":"api/articles/just do it.json","excerpt":"","keywords":null,"cover":null,"content":"<p align=center>想做的事情马上去做，不要让行为一直停留在思想上</p>\n\n\n\n\n\n\n\n\n\n","text":"想做的事情马上去做，不要让行为一直停留在思想上","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"聚合和组合","slug":"聚合和组合","date":"2021-04-22T16:00:00.000Z","updated":"2021-04-24T09:55:47.073Z","comments":true,"path":"api/articles/聚合和组合.json","excerpt":"","keywords":null,"cover":"..\\img\\2.png","content":"<h3 id=\"聚合和组合\"><a href=\"#聚合和组合\" class=\"headerlink\" title=\"聚合和组合\"></a>聚合和组合</h3><p>之前看相关类图的时候对聚合和组合的概念有点模糊，然后查阅了一些资料作以区分，接下来是个人的一些见解。</p>\n<p><strong>聚合（整体和部分关系较弱）：</strong></p>\n<p>在UML图中的关系表示为</p>\n<img src=\"..\\img\\2.png\" style=\"zoom:95%;\" />\n\n<p>聚合：两个对象之间是整体和部分的弱关系，整体和部分可以分开，部分的生命周期可以超越整体。</p>\n<p>A类的对象在创建时不会立即创建B类的对象，而是等待一个外界的对象传给它，传给它的这个对象不是A类创建的，在程序中B类一般作为A类的局部参数或变量存在。（个人比较喜欢IntelliJ Light风格，对眼睛比较友好）</p>\n<p>例如人和手机的关系，人（Person），手机（Phone）。</p>\n<img src=\"..\\img\\5.png\" style=\"zoom:80%;\" />\n\n<p><strong>组合（整体和部分关系较密）：</strong></p>\n<p>在UML图中的关系表示为</p>\n<img src=\"..\\img\\3.png\" style=\"zoom: 55%;\" />\n\n<p>组合：两个对象之间是整体和部分的密切关系，部分的生命周期不能超越整体，或者说不能脱离整体而存在。</p>\n<p>例如人和灵魂，人没有灵魂依然可以行尸走肉般存在，但是灵魂没有人体躯壳作为载体将不复存在。</p>\n<p>当A类的一个对象产生时，B类的对象随之产生，当A类的这个对象消亡时，它所包含的B类的对象也随之消亡，在程序中B类实例化对象会随着A类实例化而产生。人（Person），灵魂（Soul）。</p>\n<img src=\"..\\img\\4.png\" style=\"zoom:80%;\" />\n\n<p><strong>聚合和组合关系的区别：</strong></p>\n<p>1、依赖性区别</p>\n<p>聚合中的两种类（或实体）是可以单独存在的，不会相互影响；被关联的一方可以独立于关联一方，依赖性不强。</p>\n<p>相反，组合中的两个实体（或者类）是高度依赖于彼此的，它们之间会相互影响。</p>\n<p>2、生命周期的不同</p>\n<p>在聚合关系中的两个类（或实体）的生命周期是不同步；</p>\n<p>但在组合关系中的两个类（或实体）的生命周期是同步的。</p>\n<p>3、关联强度的不同</p>\n<p>聚合关联程度（耦合性）比组合要弱；</p>\n<p>在各种对象关系中，关系的强弱顺序为：<strong>泛化</strong> <strong>=</strong> <strong>实现</strong> <strong>&gt;</strong> <strong>组合</strong> <strong>&gt;</strong> <strong>聚合</strong> <strong>&gt;</strong> <strong>关联</strong> <strong>&gt;</strong> <strong>依赖</strong>。</p>\n<p>4、关系类型的区别</p>\n<p>聚合代表了has-a关系，一种单向关系；组合代表了part-of关系。</p>\n","text":"聚合和组合之前看相关类图的时候对聚合和组合的概念有点模糊，然后查阅了一些资料作以区分，接下来是个人的一些见解。聚合（整体和部分关系较弱）：在UML图中的关系表示为 [Figure] 聚合和组合关系的区别：1、依赖性区别聚合中的两种类（或实体）是可以单独存在的，不会相互影响；被关联","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"动态代理（Java）","slug":"动态代理（Java）","date":"2021-04-22T16:00:00.000Z","updated":"2021-04-24T09:41:50.674Z","comments":true,"path":"api/articles/动态代理（Java）.json","excerpt":"","keywords":null,"cover":null,"content":"<h3 id=\"动态代理（JDK动态代理、Cglib动态代理）\"><a href=\"#动态代理（JDK动态代理、Cglib动态代理）\" class=\"headerlink\" title=\"动态代理（JDK动态代理、Cglib动态代理）\"></a>动态代理（JDK动态代理、Cglib动态代理）</h3><p>代理模式是一种常见的设计模式，在Java中涉及广泛，例如spring底层的AOP用的就是这种编程思想。</p>\n<p>顾名思义，代理模式即是给目标对象提供一个代理对象（proxy），并由代理对象控制对目标对象的引用，也可以在目标基础上作增强。</p>\n<p>首先了解下静态代理，也可以理解为手动对目标对象进行代理，即</p>\n","text":"动态代理（JDK动态代理、Cglib动态代理）代理模式是一种常见的设计模式，在Java中涉及广泛，例如spring底层的AOP用的就是这种编程思想。顾名思义，代理模式即是给目标对象提供一个代理对象（proxy），并由代理对象控制对目标对象的引用，也可以在目标基础上作增强。首先了解","link":"","raw":null,"photos":[],"categories":[],"tags":[]}]}